# See:
# https://packaging.python.org/appveyor/
# https://github.com/ogrisel/python-appveyor-demo
# https://www.appveyor.com/docs/appveyor-yml/
# https://packaging.python.org/appveyor/

environment:
  PYPI_PASSWORD:
    secure: Sopzu1BZfXmABwhzM7mYSQ==

  matrix:

    - PYTHON: "C:\\Python36-x64"
      TARGET: "x64"
      VCVARS_VER: "14.2"
    - PYTHON: "C:\\Python36"
      TARGET: "x86"
      VCVARS_VER: "14.2"
    - PYTHON: "C:\\Python37-x64"
      TARGET: "x64"
      VCVARS_VER: "14.2"
    - PYTHON: "C:\\Python37"
      TARGET: "x86"
      VCVARS_VER: "14.2"
    - PYTHON: "C:\\Python38-x64"
      TARGET: "x64"
      VCVARS_VER: "14.2"
    - PYTHON: "C:\\Python38"
      TARGET: "x86"
      VCVARS_VER: "14.2"
    - PYTHON: "C:\\Python39-x64"
      TARGET: "x64"
      VCVARS_VER: "14.2"
    - PYTHON: "C:\\Python39"
      TARGET: "x86"
      VCVARS_VER: "14.2"

matrix:
  # Immediately finish build once one of the jobs fails.
  fast_finish: true

platform: x64

image:
  - Visual Studio 2019

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files (x86)/\""
  - ps: "ls \"C:/Program Files (x86)/Microsoft Visual Studio/\""

  # Prepend relevant Python installation to the PATH.
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # Set up the build/compiler/linker environment
  # See: https://github.com/upx/upx/blob/master/.appveyor.yml
  - call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat" %TARGET% -vcvars_ver=%VCVARS_VER%

  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "python -m pip install --disable-pip-version-check --user --upgrade pip"

  # We need wheel installed to build wheels, and this isn't pulled in by setup.py
  - "python -m pip install wheel"

  # Install tox for testing
  - "python -m pip install tox"
  
  # We need twine installed to push wheels to PyPI
  - "python -m pip install twine"

build_script:
  # Build the compiled extension
  - "python setup.py build"

test_script:
  - "tox -e py tests"

after_test:
  # If tests are successful, create binary packages for the project.
  - "python setup.py bdist_wheel"
  - ps: "ls dist"

artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  - path: dist\*

deploy_script:
  # Inspiration: https://github.com/AndrewAnnex/SpiceyPy/blob/master/appveyor.yml
  - echo "Starting Artifact Deployment"
  # populate pypirc file for twine
  - echo [distutils] > %USERPROFILE%\\.pypirc
  - echo index-servers = >> %USERPROFILE%\\.pypirc
  - echo     pypi >> %USERPROFILE%\\.pypirc
  - echo [pypi] >> %USERPROFILE%\\.pypirc
  - echo username=jgu >> %USERPROFILE%\\.pypirc
  - echo password=%PYPI_PASSWORD% >> %USERPROFILE%\\.pypirc
  # upload to pypi for windows
  # set PATH=%BK_PATH%
  # set HOME=%USERPROFILE%
  - ps: >-
      If ($env:APPVEYOR_REPO_TAG -eq "true") {
          $env:pypi_upload = 'true'
      }
      Else {
          write-output "Not on a tag, won't deploy to pypi"
      }
  - cmd: IF "%pypi_upload%"=="true" twine upload --skip-existing dist/*
  - echo "Finished Artifact Deployment"
